//needed for FBZ2 boss
global s16 Silver.lastXPos = 0
global s16 Silver.maxYPos = 0
global u8 Silver.maxYPosCounter = 0 //reused in hidden palace
global u8 Robo.Counter = 0
global bool Robo.Forceflip
global u8 Robo.EnableAnims
global u8 Robo.hit = 0 //controls the flash on robosonic when hit
global u8 Robo.FlashType
global u8 Robo.FlashCounter

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	if (global.xtrachar == 20)
	{
		if(objA0.update_address == 0x0837b2) //SIGNPOST
		{
			if(objA0.animation.sprite == 0x01)//Extra Life
			{		
				u8 atex = 0x40 + 0x20 * getMainCharacter()
				{
					Renderer.drawCustomSprite("goal_extraLife", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
				}
				return true
			}
		}
		//CHARACTERS TEXTS
		//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
		if (objA0.update_address == 0x02dd98)
		{
			if (objA0.animation.sprite == 0x14 || objA0.animation.sprite == 0x15)	// Extra Life
			{
				Renderer.drawCustomSprite("slot20_text", px, py, 0x00, 0x40, renderQueue)
				return true
			}
		}
		// CHARACTERS TEXTS FOR BLUESPHERES
		//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
		// objA0.animation.sprite:
		//  - 0x17, 0x31, 0x36 = "Score"
		//  - 0x18, 0x32, 0x37 = "Ring Bonus"
		//  - 0x19, 0x33, 0x38 = "Perfect"
		//  - 0x1a, 0x34, 0x39 = "Continue"
		//  - 0x13			   = "Sonic"
		//  - 0x14			   = "Miles" (not verified)
		//  - 0x15			   = "Tails"
		//  - 0x16			   = "Knuckles" (not verified)
		//  - 0x23			   = "got a"
		//  - 0x24			   = "Chaos Emerald"
		//  - 0x30			   = "Super Emerald"
		if (gameMode == 0x48 || gameMode == 0x0c)	// Blue Spheres results + fade to main game afterwards
		{
			// Blue Spheres results texts
			if (objA0.update_address == 0x02ea50 && global.xtrachar == 20)
			{
				bool isSKStage = (global.lock_on_state == 0 && global.sk_bluespheres)
				
				if (objA0.animation.sprite == 0x14 || objA0.animation.sprite == 0x15)	// CHAOS
				{
					Renderer.drawCustomSprite("slot20_text", px, py, 0x00, 0x40, renderQueue)
					return true
				}			
			}
		}
		if (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e || objA0.update_address == 0x02dd98)
		{
			if (objA0.animation.sprite == 0x12)
			{
				if (global.super_emeralds == 7) // HYPER
				{
					Renderer.drawCustomSprite("Joel_Hyper_text", px, py, 0x60, SPRITE_FLAG_PRIO, renderQueue)
					return true
				}
				else // SUPER
				{
					Renderer.drawCustomSprite("Joel_Super_text", px, py, 0x60, SPRITE_FLAG_PRIO, renderQueue)
					return true
				}
			}
		}
		//ENDING
		//small plane and micro outside
		//0x05d86a is contemporarily the small tornado flying right and the micro one flying left!
		//I need to have it render ONLY when flying left!
		//This should be only in Sonic/Tails ending
		if (objA0.update_address == 0x05d86a) && (char.render_flags & 0x01)
		{    
			u8 atex = 0x40 + 0x20 * getMainCharacter()
			u64 key
			key = "extraLifeMicro"				
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue+1)
			return true
		}
		
		//Final sprite for Sonic Story
		// if (objA0.update_address == 0x05e18a) 
		// {	
		// 	u64 key
		// 	key = "extraLifePose"
		// 	Renderer.drawCustomSprite(key, px, py, 0x20, objA0.render_flags | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
		// 	return true        
		// }
	
	
	
	//HOOKFINDER -- 
	//if (objA0.update_address >= 0x07b81a)&&(objA0.update_address < 0x07b81b)
	//
	//	Renderer.drawCustomSprite("boss_robo_021", px, py, 0x20, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue+1)
	//	return true 
	//

	// Characters in Data Select screen character selection
	// The arrows and big portraits are compound sprites for this object, so set objA0.animation.sprite to an empty frame instead of "return true" to not skip rendering those.
	// if (objA0.update_address == 0x00d30c || objA0.update_address == 0x00d42c)
	// {
	// 	u16 characters = (objA0.update_address == 0x00d30c) ? dataselect.nosave_characters : u16[A0 + 0x34]

	// 	if (characters == CHARS_SONIC_AND_TAILS||characters == CHARS_KNUCKLES_AND_TAILS)
	// 	{
	// 		// Extra Life
	// 		Renderer.drawCustomSprite("dataSel_character_tails", px+7, py-1, 0x80, SPRITE_FLAG_FLIP_X, renderQueue)
	// 		objA0.animation.sprite = 0
	// 	}		
	// 	else if (characters == CHARS_TAILS_ALONE)
	// 	{
	// 		// Extra Life
	// 		Renderer.drawCustomSprite("dataSel_character_tails", px, py, 0x80, 0x00, renderQueue)
	// 		objA0.animation.sprite = 0
	// 	}	
	// }
	
		if (objA0.update_address == 0x20008e)
		{
			push(A1)
			A1 = 0xffffb000						
			//update the render flags with the player's
			//so the stars are always correct and go behind waterfalls//effects etc
			objA0.render_flags = objA1.render_flags
			objA0.sprite_priority = objA1.sprite_priority
			objA0.sprite_attributes = objA1.sprite_attributes			
			//restore A1
			A1 = pop()
			renderQueue = 0xa000 - objA0.sprite_priority +1 //just give it a priority higher than the player
			prioFlag = (objA0.sprite_attributes & sprite_attribute.PRIORITY) != 0
			//this just has to render the proper frame based on its sprite value
			u64 key = stringformat("spark_0x%02x", objA0.animation.sprite)
			//System.writeDisplayLine(stringformat("sprite: %02x", renderQueue))		
			//as always we're in register A0 so we can read from "char."		
			//render the stars not on px and py but offset them by rotation
			Renderer.drawCustomSprite(key, px + objA0.velocity.x , py + objA0.velocity.y, 0x00, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue, 0, 255)//0 is the angle				
			return true				
		}
	}

    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function string getCharacterEndPoseSpriteKey(u8 character, bool isSuperActive)
{
	if (global.xtrachar == 20)
		return "extraLifePose"
	return base.getCharacterEndPoseSpriteKey(character, isSuperActive)
}


//Tails'tails in bluesphere
// ExtraLife doesn't have the tails in bluesphere
// as such it has to stay hidden
//# address-hook(0x009488) end(0x0094d2)
function void fn009488()
{
	if (global.xtrachar != 20)
	{
		base.fn009488()
		return
	}
	A1 = 0xffff0000 + objA0.value3e
	objA0.position.x.u16 = objA1.position.x.u16
	objA0.position.y.u16 = objA1.position.y.u16

	D0.u16 = 0x2aaa
	D1.s16 = bluespheres.movement_speed
	if (D1.s16 >= 0)
	{
		D0.u16 += D1.s16
	}

	u32 result = u32(u16[A0 + 0x24]) + u32(D0.u16)
	u16[A0 + 0x24] = u16(result)
	if (result & 0x10000)	// Carry flag check
	{
		++objA0.animation.sprite
		if (objA0.animation.sprite >= 15)
		{
			objA0.animation.sprite = 1
		}
	}
	
	if (objA0.animation.sprite >= 0x0D)
	{
		objA0.animation.sprite = 0x01
	}
	
	//no draw object...
	//	DrawObject()

	A2 = 0x291106
	D6 = 0x2909e8
	D4.u16 = 0xf600
	fn0091a2()
}

//PLAYER 2 PALETTE IN BLUESPHERES
//Yes, it is set here!
//# address-hook(0x0081c6) end(0x00858e)
function void SpecialStage()
{
	if (global.xtrachar != 20)
	{
		base.SpecialStage()
		return
	}

#if STANDALONE
	playMusic(MUSIC_CTRL_FADEOUT)
#else
	playMusic(MUSIC_CTRL_STOP)
#endif

	kosinski.queue_size = 0
	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	FadeScreenToWhiteBlocking()

#if STANDALONE
	// Add a small artificial delay here
	for (u8 i = 0; i < 12; ++i)
		yieldInWhiteScreen()
#else
	set_status_register(0x2700)
#endif

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)	// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0)
	VDP.Config.setBackdropColor(0x20)
	VDP.Config.setRenderingModeConfiguration(false)
	water.fullscreen = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffffe6e, 0x4c)
	zeroMemory(0xffffe400, 0x100)

	u32[0xfffffe66] = 0
	u32[0xfffffe6a] = 0

	fn01aa6e()

	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	// Load special stage palette
	//  -> Character colors is the 8 colors from 0xfffffc90 (for Sonic/Knuckles) and 0xfffffcb0 (for Tails)
	copyMemory(0xfffffc80, 0x00896e, 0x100)
	if (global.characters == CHARS_KNUCKLES_ALONE)
	{
		copyMemory(0xfffffc90, 0x0089ee, 0x10)
	}

#if STANDALONE
	for (u8 player = 0; player < getNumPlayers(); ++player)
	{
		u8 character = getPlayerCharacter(player)
		u64 paletteKey = stringformat("bluesphere_palette_extraLife_0%d", ExtraLifePalette)
		u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
		if (numColors > 0)
		{
			u32 dest = 0x802180 + character * 0x40
			for (u16 i = 0; i < numColors; ++i)
			{
				u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
			}
		}
	}
#endif

	Nemesis.loadDataToVRAM(0x0b07b8, 0x0000)

	fn0085b0()

	Enigma.decompress(0x0aef54, 0xffff5500, 0x0000)
	copyRectToVRAM(0xffff5500, 0xc000, 0x28, 0x1c)

	Nemesis.loadDataToVRAM(0x0ad904, 0xd000)
	Nemesis.loadDataToVRAM(0x0adf60, 0xb4e0)
	Nemesis.loadDataToVRAM(0x0aeed0, 0xb360)
	Nemesis.loadDataToVRAM(0x0ad472, 0xabe0)
	Nemesis.loadDataToVRAM(0x0ad5f4, 0xdf00)
	Nemesis.loadDataToVRAM(0x0ad650, 0xf020)

	A0 = 0x0ad650
	A4 = 0xffffe020
	fn0015cc()

	Nemesis.loadDataToVRAM(0x0ad7bc, 0xb120)
	Nemesis.loadDataToVRAM(0x0ad430, 0xf400)

	copyRectToVRAM(0x008d2c, 0xc084, 0x08, 0x03)
	copyRectToVRAM(0x008d2c, 0xc0bc, 0x08, 0x03)

	Enigma.decompress(0x0aedb0, 0xffff0000, 0x459b)
	copyRectToVRAM(0xffff0000, 0xe000, 0x40, 0x20)

	Kosinski.decompress(0x0b2e36, 0xffff0000)

	fn009ea0()
	fn00a0e6()

	global.level_started = 0
	bluespheres.bs_hud_dirty = 0xff
	bluespheres.rings_flags = 0x80
	bluespheres.current_gamespeed = 0x1000
	bluespheres.speedup_countdown = BlueSpheres.useGeneratedStages() ? 2700 : 1800
	camera.foreground.x.u16 = 0
	camera.foreground.y.u16 = 0
	level.height.bitmask = 0xffff

	u32[0xffffb000] = 0x008faa
	if (getNumPlayers() >= 2)
	{
		u32[0xffffb04a] = 0x009212
	}
	u32[0xffffb094] = 0x008df8
	u32[0xffffb0de] = 0x008e40
	UpdateGameObjects()

	fn009d9e()
	fn009dde()
	RenderSprites()

	BlueSpheres.RenderSpheres()
	fn009d5e()

	u8[0xffffe433] = 0x01
	global.frame_state = 0x1c

	waitForNextFrame()

	u8[0xffffe433] = 0
	VDP.Config.setRenderingModeConfiguration(true)		// Enable shadow/highlight palette mode

	global.demo_countdown = 1800
	fn0075d2()

#if STANDALONE
	if (BlueSpheres.useGeneratedStages())
	{
		playMusic(0xf8)		// Different music track, one that speeds up the music only every 45 (instead of 30) seconds
	}
	else
#endif
	{
		playMusic(0x1c)
	}

	VDP.Config.setActiveDisplay(true)
	BlueSpheres.FadeIn()

	while (true)
	{
		UpdateGamePause()
		global.frame_state = 0x1c
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()
	@EntryPoint:

		++level.framecounter
		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		BlueSpheres.RenderCharacterSprites()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#else
	#if STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		if (global.rolling_demo && global.demo_countdown == 0)
			break

		if (global.game_mode != 0x34)	// Blue Spheres game mode
			break

	#if STANDALONE
		// Only needed to support restart from the Pause Menu
		//  -> Not used at the moment, so nevermind
		if (level.restart)
		{
			global.game_mode = 0x0c
			return
		}
	#endif
	}

	if (global.rolling_demo)
	{
		global.game_mode = 0
	}

	global.demo_countdown = 60
	palette_fade.range = 0x003f
	u16[0xfffff794] = 0

	while (true)
	{
		global.frame_state = 0x1c

		waitForNextFrame()

		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#else
	#if STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		--u16[0xfffff794]
		if (s16[0xfffff794] < 0)
		{
			u16[0xfffff794] = 2
			FadePaletteToWhite()
		}

		if (global.demo_countdown == 0)
			break
	}
}

//MAIN MENU RENDER PREVENTION
--------------------
//OVERLOAD SPRITE DIRECT ENTRIES (or they are drawn ANYWAY)
function void Standalone.drawCharacterSpriteDirect(u8 character, s16 px, s16 py, u16 animationSpriteEx, u8 flags, u8 atex, u16 renderQueue)
{
	if (global.game_mode == 0x4c && character == 1)
	{
		return
	}
	base.Standalone.drawCharacterSpriteDirect(character, px, py, animationSpriteEx, flags,  atex, renderQueue)
}
