function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	//Extra Life rendering has to trigger for tails and his...well, tails...
	//MILES AND HIS TAILS - Change render based on form is done in the main render process, here we add the custom animation
	//it's AMAZING but there is a RENDERING BUG that sets the character to 2 during Sonic's cutscene in AIZ for a few frames and has it enter ExtraLife's rendering.
	//as I'm stupid and I can't figure out why, I'll just force the normal render if AIZ and x less than 0x1200
	if (extraLife.CARRYBOX) //render a lifebox for tails to carry
	{
		ExtraLifeCarriedAsBox(character, variant, px, py, asSmallGhost)
	}	
	if ((global.xtrachar == 20 && character == CHARACTER_TAILS && A0 == 0xffffb000)||(variant == 2))&&( global.zone_act != 0x0000||camera.position.x.u16 >0x1100 ) && extraLife.RENDERTAILS == false && char.state != 0x34  //NOT FROZEN IN ICZ REDESIGNED
	{//custom render routines
		return ExtraLifeRendering(character, variant, px, py, asSmallGhost)
	}
	else
	{	
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)
	}
}

global u16 extraLifeFrameCounter //Controls custom animations
global u8 extraLife.stateold //Previous frame state to reset the counters
global bool extraLife.invert //for animations on air dash
global u8 extraLife.Monitor
global bool extraLife.Boxed //the box "spawned" in the bored animation
//a bit of variables to position the smoke effect
global s16 extraLife.PX
global s16 extraLife.PY
global u16 extraLife.cameraOLDX
global u16 extraLife.cameraOLDY
global s16 extraLife.velY //falling monitor
global u16 extraLife.RENDERTAILS //used to have TAILS APPEAR WHEN NEEDED IN A SONIC (or Knuckles) GAME -> MGZ2 boss, CNZ1 MHZ1
global bool extraLife.SPAWNINGIN
global bool extraLife.CARRYBOX //Render a lifebox for Tails to carry during mgz2 boss
global bool extraLife.STARTASBOX //Start as a falling box in CNZ and MHZ

function bool ExtraLifeRendering(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a
	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = 0
	u8 rotationMode = 0

	// Tails' Tails
	if (variant == 2) || (extraLife.SPAWNINGIN)
	{
		//Do not render for extraLife when he *ISN'T* tails
		//Do not render also for "flying in" so it will look like he pops in
		if (true)
		{
			return true
		}
		
		if (global.zone == 0x15)
		{			
			return true			
		}
		characterAddress = 0xffff0000 + u16[A0 + 0x30]

		// Do not render when blinking after hit
		if (u8[characterAddress + 0x34] != 0 && (u8[characterAddress + 0x34] & 0x04) == 0)
		{
			// Prevent emulator-like rendering
			return false
		}
		// Do not render when Tails looks into the background (e.g. LBZ 2 end cutscene) and in DEZ gravity transporters
		if (u8[characterAddress + 0x22] >= 0x55 && u8[characterAddress + 0x22] <= 0x5b)
		{
			// Prevent emulator-like rendering
			return false
		}
		isPlayer1 = (characterAddress == 0xffffb000)
		character = CHARACTER_TAILS
	}

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)		// First ask modded scripts
	if (variant < 2)
	{//It's a character, not Tails' Tails
		//RESET COUNTER IF STATE HAS CHANGED
		if (char.state != extraLife.stateold)
		{
			extraLifeFrameCounter = 0
		}
		//Forcefix to a tails tired glitch. ExtraLife should NEVER fly when renderized!
		if (animationSprite == 0xa3 || animationSprite == 0xa4)//(char.state == char.state.TAILS_FLYTIRED)
		{
			char.double_jump_state = 0
			char.state = char.state.ROLLING
			//char.jumping = 0			// Clear this flag to prevent a new flight while falling			
		}
		
		
		if (global.zone_act == 0x0601 && char.position.x.u16 > 0x4300)
		{
			if (animationSprite == 0x8d)
			animationSprite = 0x8a
			if (animationSprite == 0x8c)
			animationSprite = 0x89
		}
		

		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				animationSprite = 0x78
				rotationMode = 2
			}
			else if (animationSprite >= 0xc3 && animationSprite <= 0xca)
			{
				animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
				rotationMode = 1
			}
			else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
			{
				// Only for DDZ
				rotationMode = 1
			}

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}

		// Modified animations are handled here
		// Overwrite an animation with the proper one
		//stringformat("hud_lives_icon_%s", characterName)
		//pick key to use
		u64 innerkey = (super.active.tails) ? stringformat("superextraLife",0) : stringformat("extraLife",0)
		// ROLLING ANIMATION (common)
		// overwrite with the custom frames
		// and set appropriate speed
		if (animationSprite >= 0x96 && animationSprite <= 0x98)
		{
			//Set an animation frame based on the ground speed
			if (abs(char.groundspeed) <= 0x300)
			{
				animationSpriteEx = (level.framecounter >> 2) & 0x07 // Slow speed
			}
			if (abs(char.groundspeed) >= 0x600)
			{
				animationSpriteEx = level.framecounter & 0x07 // High speed
			}
			else if (abs(char.groundspeed) >= 0x300)
			{
				animationSpriteEx = (level.framecounter >> 1) & 0x07 // Medium speed
			}				
			//set the frame
			key = stringformat ("%s_roll_%d", innerkey, animationSpriteEx)			
		}
		//Drop Dash, just use the frames provided with Sonic 3 Air
		//if (char.state == char.state.SONIC_DROPDASH)
		//{
		//	animationSpriteEx = CHAR_ANIMSPRITE_SONIC_DROPDASH + ((level.framecounter >> 1) & 0x01)
		//	key = stringformat("sonic_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
		//}
		if (ExtraLife.DashStart)
		{
			//angle determination
			if (char.flags & char.flag.FACING_LEFT)
			{
				if (control.player1.state & CONTROL_UP)
				{
					if (control.player1.state & CONTROL_LEFT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0x20
						}
						else
						{
							angle = 0x60
						}	
					}
					else
					{
						angle = 0x80
					}
				}
				else if (control.player1.state & CONTROL_DOWN)
				{
					if (control.player1.state & CONTROL_LEFT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0x60
						}
						else
						{
							angle = 0x20
						}							
					}
					else
					{
						angle = 0x00
					}		
				}
				else // PURE LEFT
				{
					if (global.inv_gravity)
					{
						angle = 0xc0
					}
					else
					{
						angle = 0x40
					}					
				}
			}
			else
			{
				if (control.player1.state & CONTROL_UP)
				{
					if (control.player1.state & CONTROL_RIGHT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0xe0
						}
						else
						{
							angle = 0xa0
						}						
					}
					else
					{
						angle = 0x80
					}
				}
				else if (control.player1.state & CONTROL_DOWN)
				{
					if (control.player1.state & CONTROL_RIGHT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0xa0
						}
						else
						{
							angle = 0xe0
						}	
					}
					else
					{
						angle = 0x00
					}						
				}
				else // PURE RIGHT
				{
					if (global.inv_gravity)
					{
						angle = 0x40
					}
					else
					{
						angle = 0xc0
					}
				}
			}
			key = stringformat("extraLife_airdash_4", 0)
			ExtraLife.DashStart = false
		}

		if (char.state == char.state.ROLLING && ExtraLife.AirDash)
		{
			// Clockwise angle: 0x00 = upright, 0x40 = left wall, 0x80 = upside down, 0xc0 = right wall
			// HOW FUNNNNN! I HAVE TO ACCOUNT FOR GRAVITY SWITCH IN DEZ2!
			
			
			if (char.flags & char.flag.FACING_LEFT)
			{
				if (control.player1.state & CONTROL_UP)
				{
					if (control.player1.state & CONTROL_LEFT)
					{						
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_X
							angle = 0x20
						}
						else
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0x60
						}						
					}
					else
					{
						angle = 0x00
					}
					extraLife.invert = true // extraLife.invert ANIMATION
				}
				else if (control.player1.state & CONTROL_DOWN)
				{
					if (control.player1.state & CONTROL_LEFT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_X
							angle = 0x60
						}
						else
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0x20
						}
						extraLife.invert = true // extraLife.invert ANIMATION
					}
					else
					{
						angle = 0x00
					}		
				}
				else // PURE LEFT
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					if (global.inv_gravity)
					{
						angle = 0xc0
					}
					else
					{
						angle = 0x40 //to left -- extraLife.invert ANIMATION TOO
					}					
					extraLife.invert = true
				}
			}
			else
			{
				if (control.player1.state & CONTROL_UP)
				{
					if (control.player1.state & CONTROL_RIGHT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_X
							angle = 0xe0
						}
						else
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0xa0
						}			
					}
					else
					{
						angle = 0x00
					}
					extraLife.invert = true // extraLife.invert ANIMATION
				}
				else if (control.player1.state & CONTROL_DOWN)
				{
					if (control.player1.state & CONTROL_RIGHT)
					{
						if (global.inv_gravity)
						{
							flags ^= SPRITE_FLAG_FLIP_X
							angle = 0xa0
						}
						else
						{
							flags ^= SPRITE_FLAG_FLIP_Y
							angle = 0xe0
						}							
						extraLife.invert = true // extraLife.invert ANIMATION
					}
					else
					{
						angle = 0x00
					}						
				}
				else // PURE RIGHT
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					if (global.inv_gravity)
					{
						angle = 0x40
					}
					else
					{
						angle = 0xc0 //to right -- extraLife.invert ANIMATION TOO
					}
					extraLife.invert = true
				}
			}
				
			if (extraLife.invert)
			{
				if (extraLifeFrameCounter < 1)
				{
				key = stringformat("extraLife_airdash_3", 0)
				}
				else if (extraLifeFrameCounter < 2 )
				{
				key = stringformat("extraLife_airdash_2",  0)
				}
				else if (extraLifeFrameCounter < 3)
				{
				key = stringformat("extraLife_airdash_1",  0)
				}
				else if (extraLifeFrameCounter < 4)
				{
				key = stringformat("extraLife_airdash_0",  0)
				}
			}
			else
			{
				if (extraLifeFrameCounter < 1)
				{
				key = stringformat("extraLife_airdash_0", 0)
				}
				else if (extraLifeFrameCounter < 2 )
				{
				key = stringformat("extraLife_airdash_1",  0)
				}
				else if (extraLifeFrameCounter < 3)
				{
				key = stringformat("extraLife_airdash_2",  0)
				}
				else if (extraLifeFrameCounter < 4)
				{
				key = stringformat("extraLife_airdash_3",  0)
				}
			}
			if (extraLifeFrameCounter<4)
			{
				extraLifeFrameCounter = extraLifeFrameCounter +1
			}
			if (extraLifeFrameCounter>=4)
			{
				extraLifeFrameCounter = 0
			}
		}
		
		//FAST RUN Or Super Float - ALL DIRECTIONS, must be running action as it shares the sprite number with tails fast run			
		if (animationSprite >= 0xc3 && animationSprite <= 0xca) && (char.state == char.state.RUNNING)
		{
			// Rotate the sprite if smooth animation is not on.
			if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
			{
				angle = (animationSprite - 0xc3) / 2 * 0xe0
				if (char.flags & char.flag.FACING_LEFT)
					angle = -angle
				//animationSprite = 0x21 + (animationSprite - 0x21) % 4
			}
			if (super.active.tails)
			{
				//set the frame, for supersonic form too, as it has to override tails' default 2 frame fastrun anyway
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + ((level.framecounter >> 1) & 0x01)
				key = stringformat ("%s_super_%d", innerkey, animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)					
			}
			else
			{
				//set the frame
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)
				key = stringformat ("%s_fast_%d", innerkey, animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)														
			}
		}
		//SPINDASH it's 10 frames...needs to use a counter.
		if (animationSprite >= 0x86 && animationSprite <= 0x88)
		{
			if ((extraLifeFrameCounter == 0)||(extraLifeFrameCounter == 2)||(extraLifeFrameCounter == 4)||(extraLifeFrameCounter == 6)||(extraLifeFrameCounter == 8))
			{
			key = stringformat("%s_spindash_0", innerkey)
			}
			if (extraLifeFrameCounter == 1)
			{
			key = stringformat("%s_spindash_1",  innerkey)
			}
			if (extraLifeFrameCounter == 3)
			{
			key = stringformat("%s_spindash_3",  innerkey)
			}
			if (extraLifeFrameCounter == 5)
			{
			key = stringformat("%s_spindash_5",  innerkey)
			}
			if (extraLifeFrameCounter == 7)
			{
			key = stringformat("%s_spindash_7",  innerkey)
			}
			if (extraLifeFrameCounter == 9)
			{
			key = stringformat("%s_spindash_9",  innerkey)
			}
			if (extraLifeFrameCounter<10)
			{
				extraLifeFrameCounter = extraLifeFrameCounter +1
			}
			if (extraLifeFrameCounter>=10)
			{
				extraLifeFrameCounter = 0
			}
		}
		//Crouching
		if (animationSprite == 0x99) //Extra life has more frames than tails
		{
			if (extraLifeFrameCounter < 10)
			{
			key = stringformat("%s_crouch_0", innerkey)
			}
			if (extraLifeFrameCounter >= 10)
			{
			key = stringformat("%s_crouch_1", innerkey)
			}
			if (extraLifeFrameCounter < 10)
			{
			extraLifeFrameCounter = extraLifeFrameCounter + 1
			}
		}
		//Looking Up
		if (animationSprite == 0xb0) //Extra life has more frames than tails
		{
			if (extraLifeFrameCounter < 10)
			{
			key = stringformat("%s_look_up_0", innerkey)
			}
			if (extraLifeFrameCounter >= 10)
			{
			key = stringformat("%s_look_up_1", innerkey)
			}
			if (extraLifeFrameCounter < 10)
			{
			extraLifeFrameCounter = extraLifeFrameCounter + 1
			}
		}
		//LEDGE ANIMATION 
		if (animationSprite >= 0x9a && animationSprite <= 0x9b)
		{
			if (super.active.tails) //super sonic
			{
				key = stringformat("character_superslot20_0x9a", 0)
			}
			else //sonic
			{
				if (extraLifeFrameCounter < 10)
				{
				key = stringformat("character_slot20_0xa4L", 0)
				}
				if ((extraLifeFrameCounter < 20) && (extraLifeFrameCounter >= 10))
				{
				key = stringformat("character_slot20_0xa5L", 0)
				}
				if ((extraLifeFrameCounter < 30) && (extraLifeFrameCounter >= 20))
				{
				key = stringformat("character_slot20_0xa6L", 0)
				}
				if (extraLifeFrameCounter < 30)
				{
				extraLifeFrameCounter = extraLifeFrameCounter +1
				}
				if (extraLifeFrameCounter >= 30)
				{ //repeat the cycle
					extraLifeFrameCounter = 1
				}
			}
		}
		//VICTORY ANIMATION
		// Play custom one for Extra Life
		// uses the global variable declared ChaosWinCounter
		if (char.state == char.state.WIN_POSE)			
		{	
			//Glitch
			if  ((extraLifeFrameCounter >= 5)&&(extraLifeFrameCounter < 10) || (extraLifeFrameCounter >= 25)&&(extraLifeFrameCounter < 30))
			{
				key = stringformat("extraLife_victory_1", 0)
			}
			else if ((extraLifeFrameCounter >= 15)&&(extraLifeFrameCounter < 20) || (extraLifeFrameCounter >= 35)&&(extraLifeFrameCounter < 40))
			{
				key = stringformat("extraLife_victory_2", 0)
			}
			else if (extraLifeFrameCounter < 45)
			{
				key = stringformat("extraLife_victory_0", 0)
			}
			//Laugh
			else if ((extraLifeFrameCounter < 50) || (extraLifeFrameCounter >= 60)&&(extraLifeFrameCounter < 70) || (extraLifeFrameCounter >= 80)&&(extraLifeFrameCounter < 90))
			{
				key = stringformat("extraLife_victory_4", 0)
			}
			else if (extraLifeFrameCounter < 90)
			{
				key = stringformat("extraLife_victory_3", 0)
			}
			//Final Frame
			else
			{
				key = stringformat("extraLife_victory_5", 0)
			}
			//counter
			if (extraLifeFrameCounter < 90)
			{
				extraLifeFrameCounter = extraLifeFrameCounter +1
			}		
		}
		
		//BORED ANIMATION - Transform in monitor
		if (animationSprite >= 0xb2 && animationSprite <= 0xb4)||(animationSprite == 0xb1 && extraLifeFrameCounter != 0)||(extraLife.STARTASBOX)
		{
			if (extraLife.STARTASBOX && extraLifeFrameCounter < 40)
			{ //start as a box
				extraLifeFrameCounter = 40
			}
			if (extraLife.STARTASBOX && ((char.flags & char.flag.IN_AIR) == 0))
			{
				extraLife.Boxed = true
			}
			//0xb1 -- sonic looking at the camera frame
			//Glitch out to monitor box
			if (extraLifeFrameCounter < 5)
			{
				if (super.active.tails)
				{
					key = stringformat("superextraLife_bored_0", 0)
				}
				else
				{
					key = stringformat("extraLife_bored_0", 0)
				}
			}
			else if (extraLifeFrameCounter < 10)
			{
				if (super.active.tails)
				{
					key = stringformat("character_superslot20_0xb1", 0)
				}
				else
				{
					key = stringformat("character_slot20_0xb1", 0)
				}
			}
			else if (extraLifeFrameCounter < 15)
			{
				if (super.active.tails)
				{
					key = stringformat("superextraLife_bored_1", 0)
				}
				else
				{
					key = stringformat("extraLife_bored_1", 0)
				}
			}
			else if (extraLifeFrameCounter < 20)
			{
				if (super.active.tails)
				{
					key = stringformat("character_superslot20_0xb1", 0)
				}
				else
				{
					key = stringformat("character_slot20_0xb1", 0)
				}
			}
			else if (extraLifeFrameCounter < 25)
			{
				if (super.active.tails)
				{
					key = stringformat("superextraLife_bored_0", 0)
				}
				else
				{
					key = stringformat("extraLife_bored_0", 0)
				}
			}
			else if (extraLifeFrameCounter < 30)
			{
				if (super.active.tails)
				{
					key = stringformat("superextraLife_bored_0", 0)
				}
				else
				{
					key = stringformat("character_slot20_0xb1", 0)
				}
			}
			else if (extraLifeFrameCounter < 35)
			{
				if (super.active.tails)
				{
					key = stringformat("superextraLife_bored_0", 0)
				}
				else
				{
					key = stringformat("extraLife_bored_1", 0)
				}
				if (extraLifeFrameCounter == 34)
				{
					extraLife.Monitor = 1
					extraLife.Boxed = true					
				}
			}
			else if (extraLifeFrameCounter < 40)
			{				
				key = stringformat("character_slot20_0xb1", 0)
			}	
			else if (extraLifeFrameCounter < 42)
			{
				//force face right for the monitor to look right
				//ExtraLife as P2 faces sonic's direction and ignores a forced right.
				//I have to swap the render flag!
				if (char.flags & char.flag.FACING_LEFT)
				{
					flags ^= SPRITE_FLAG_FLIP_X
				}
				key = stringformat("extraLife_bored_2", 0)
			}				
			else
			{
				if (char.flags & char.flag.FACING_LEFT)
				{
					flags ^= SPRITE_FLAG_FLIP_X
				}
				key = stringformat("extraLife_bored_3", 0)
			}										
			if (extraLifeFrameCounter < 46)
			{
			extraLifeFrameCounter = extraLifeFrameCounter +1
			}
			if (extraLifeFrameCounter >= 46)
			{ //repeat the cycle for the life box to flash
				extraLifeFrameCounter = 40
			}
		}
		// -- if out of the boxed bored animation, explode the monitor
		if (extraLife.Boxed && (animationSprite < 0xb1 || animationSprite > 0xb4))
		{//trigger the smoke animation + broken monitor
			extraLife.Monitor = 1
			extraLife.Boxed = false
		}
		
		timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			//pick from the proper frame based on ExtraLife's form
			key = stringformat(super.active.tails ? "character_superslot20_0x%02x" : "character_slot20_0x%02x", animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
		//track current state for the next frame
		extraLife.stateold = char.state
	}
	else // Tails' tails
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			if (animationSprite >= 0x05 && animationSprite <= 0x14)
			{
				animationSprite = 0x05 + (animationSprite - 0x05) % 4
				angle = lookupAngleByVector(s16[characterAddress + 0x18], s16[characterAddress + 0x1a])
        
				flags = 0
				if (objA0.flags2a & 0x01)
				{
					flags |= SPRITE_FLAG_FLIP_X
					angle += 0x80
				}
				if (global.inv_gravity)
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					angle = -angle
				}
			}
		}

		if (key == 0)//normal tails animation	
		{			
			key = stringformat("character_tails_tails_0x%02x", animationSprite)
		}
		
		if (!Renderer.hasCustomSprite(key))
		{
			key = Renderer.setupCustomCharacterSprite(0x336620, 0x344d74, 0x344bb8, animationSprite, 0x00)
		}
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & 0x8000)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

//SMOKE EFFECT ON BORED ACTION		
	//NOTE: rendering is in screen coordinates, not on the map coordinates.
	//The character's speed is not the right way to adjust this effect's position.
	//The screen is not centered on the player, but on the "camera", so its the camera's X and Y differences that need to be used to reposition it properly.
	//its position on screen has to be stored, as well as the camera's old position in the map
	if (extraLife.Monitor > 0)
	{
		if (extraLife.Monitor ==  1) //set the coordinates and the starting old camera
		{
			extraLife.STARTASBOX = false //turn off the startasbox flag
			extraLife.PX = px
			extraLife.PY = py
			extraLife.cameraOLDX = camera.position.x.u16
			extraLife.cameraOLDY = camera.position.y.u16
			playSound(0x3D) //broken monitor sound
		}
		//calculate where the effect moves on screen then set old camera coords
		extraLife.PX = extraLife.PX + (extraLife.cameraOLDX - camera.position.x.u16)
		extraLife.PY = extraLife.PY + (extraLife.cameraOLDY - camera.position.y.u16)
		extraLife.cameraOLDX = camera.position.x.u16
		extraLife.cameraOLDY = camera.position.y.u16
		
		u64 key4
		if (extraLife.Monitor < 24)
		{
			key4 = stringformat("extraLife_smoke_%d", extraLife.Monitor/6 )
			//account for gravity --> 0x02		
			Renderer.drawCustomSprite(key4, extraLife.PX, extraLife.PY, 0x00, 0, 0xa800)
		}
		//if (extraLife.BreakOut)
		//{
		//	key4 = stringformat("extraLife_broken_monitor", 0 )
		//	Renderer.drawCustomSprite(key4, extraLife.PX, extraLife.PY, atex, flags | SPRITE_FLAG_PRIO, 0xa7ff)
		//}
		
		//Increase the counter and "kill" the object if needed
		extraLife.Monitor = extraLife.Monitor +1
		if (extraLife.Monitor >=24)
		{
			extraLife.Monitor = 0			
		}
		//else if (extraLife.Monitor >=120)
		//{
		//	extraLife.Monitor = 0
		//	extraLife.BreakOut = false
		//}
	}
	
//SMOKE EFFECT END
	
	
	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}
	
	// Prevent emulator-like rendering
	return true
}


function void ExtraLifeCarriedAsBox (u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	u64 key
	if (extraLifeFrameCounter < 2)
	{
		//force face right for the monitor to look right
		char.flags &= ~char.flag.FACING_LEFT		// Make sure to face right
		key = stringformat("extraLife_bored_2", 0)
	}
	else
	{
		key = stringformat("extraLife_bored_3", 0)
	}										
	if (extraLifeFrameCounter < 6)
	{
		extraLifeFrameCounter = extraLifeFrameCounter +1
	}
	if (extraLifeFrameCounter >= 6)
	{ //repeat the cycle for the life box to flash
		extraLifeFrameCounter = 0
	}
	//position...under tails if tails is flying, falling down if not
	
	if (char.state >= 0x20 && char.state <= 0x23) //fly actions
	{
		extraLife.PX = px
		extraLife.PY = py + 17
		extraLife.velY = 0
	}
	else
	{
		//extraLife.PX no change on X
		extraLife.velY = extraLife.velY +1
		extraLife.PY = extraLife.PY + (extraLife.velY/15)
	}
	Renderer.drawCustomSprite(key, extraLife.PX, extraLife.PY, 0x00, 0, 0xa000 - char.sprite_priority +1)
	
	return
}